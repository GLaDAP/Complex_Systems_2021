from mesa import Agent

"""
A tree has the following conditions:
- Fine: Not on fire, growing untill health is 100
- On Fire: If on fire, health is reducing untill 0. After that, the agent is removed.
"""

class Tree(Agent):
    """
    A tree cell.

    Attributes:
        x, y: Grid coordinates
        condition: Can be "Fine", "On Fire", or "Burned Out"
        unique_id: (x,y) tuple.

    unique_id isn't strictly necessary here, but it's good
    practice to give one to each agent anyway.
    """

    def __init__(self, unique_id, pos, model, initial_hp):
        """
        Create a new tree.
        Args:
            unique_id (int): ID Generated by Mesa
            pos (tuple): The tree's coordinates on the grid.
            model (mesa.Model): standard model reference for agent.
        """
        super().__init__(unique_id, model)
        self.pos = pos
        self.health = initial_hp
        self.burn_rate = 0
        self.condition = "Fine"

    def __update_tree_on_fire(self):
        if self.burn_rate <= 0:
            # In case the fire is already extinguished
            self.condition = "Fine"
            self.burn_rate = 0 # in case the burn_rate is negative after extinguishing
            self.health += self.model.growth_rate
        # Tree is burning down 
        self.burn_rate += self.model.burn_rate
        self.health -= self.burn_rate
        if self.health < 0:
            # Tree burned down completely. Remove from scheduler.
            self.model.grid._remove_agent(self.pos, self)
            self.model.schedule.remove(self)
        
        if self.burn_rate > self.model.ignition_threshold:
            # Set Neighbours on fire
            trees = self.get_neighbours()
            for tree in trees:
                tree.set_on_fire()

    def set_on_fire(self):
        self.condition = "On Fire"
        self.burn_rate += self.model.burn_rate

    def extinguish(self, extinguish_intensity):
        self.burn_rate -= extinguish_intensity

    def get_neighbours(self):
        """
        Get the neighboring trees.
        """
        agents_in_radius = self.model.grid.get_neighbors(
            self.pos,
            moore=True, # Only direct neighbours, no diagonals
            include_center=False,
            radius=1
        )
        trees = [
            agent for agent in agents_in_radius if isinstance(agent, Tree)
        ]
        return trees

    def step(self):
        """
        If the tree is on fire, spread it to fine trees nearby.
        """
        if self.condition == "On Fire":
            self.__update_tree_on_fire()
        else:
            # Tree is not on fire, so let it grow untill 100
            if self.health < self.model.max_trees_hp:
                self.health += self.model.growth_rate
